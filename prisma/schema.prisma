generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  nickname      String?
  location      String?
  instruments   String[]
  musicPrefs    String[]
  facebookId    String?
  profileImage  String?
  experience    String?   // "beginner", "intermediate", "advanced"
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  organizedEvents Event[] @relation("OrganizerEvents")
  signups        EventSignup[]
  venueRoles     VenueOrganizer[]
  knownSongs     UserSong[]
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  email       String
  phone       String?
  website     String?
  description String?
  capacity    Int?
  amenities   String[] // ["sound_system", "instruments", "stage"]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  events      Event[]
  organizers  VenueOrganizer[]
}

model VenueOrganizer {
  id       String  @id @default(cuid())
  venueId  String
  venue    Venue   @relation(fields: [venueId], references: [id], onDelete: Cascade)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     String  @default("organizer") // "owner", "manager", "organizer"
  approved Boolean @default(false)
  createdAt DateTime @default(now())
  
  @@unique([venueId, userId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  dateTime    DateTime
  duration    Int      @default(240) // minutes
  type        String   // "full_band", "songwriter", "open_mic"
  maxCapacity Int?
  signupDeadline DateTime?
  houseband   Boolean  @default(false)
  housebandSongs String[] // songs the house band knows
  status      String   @default("upcoming") // "upcoming", "active", "completed", "cancelled"
  
  venueId     String
  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  organizerId String
  organizer   User     @relation("OrganizerEvents", fields: [organizerId], references: [id])
  
  signups     EventSignup[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([dateTime])
  @@index([venueId])
}

model EventSignup {
  id           String   @id @default(cuid())
  queuePosition Int
  instruments  String[]
  needsMembers String[] // instruments they need
  songChoice   String?  // requested song
  notes        String?  // special requests
  status       String   @default("queued") // "queued", "performing", "completed", "cancelled"
  signupTime   DateTime @default(now())
  performanceStart DateTime?
  performanceEnd   DateTime?
  
  eventId      String
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, userId])
  @@index([eventId, queuePosition])
}

model Song {
  id       String @id @default(cuid())
  title    String
  artist   String
  genre    String?
  key      String?
  tempo    String? // "slow", "medium", "fast"
  difficulty String? // "easy", "medium", "hard"
  
  userSongs UserSong[]
  
  @@unique([title, artist])
  @@index([genre])
}

model UserSong {
  id           String @id @default(cuid())
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId       String
  song         Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  proficiency  String @default("learning") // "learning", "comfortable", "expert"
  
  @@unique([userId, songId])
}
