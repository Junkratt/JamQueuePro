generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  nickname      String?
  location      String?
  instruments   String[]
  musicPrefs    String[]
  facebookId    String?
  createdAt     DateTime  @default(now())
  
  organizedEvents Event[] @relation("OrganizerEvents")
  signups        EventSignup[]
  venues         VenueOrganizer[]
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  address     String
  email       String
  phone       String?
  createdAt   DateTime @default(now())
  
  events      Event[]
  organizers  VenueOrganizer[]
}

model Event {
  id          String   @id @default(cuid())
  title       String
  dateTime    DateTime
  type        String   // "full_band" or "songwriter"
  maxCapacity Int?
  
  venueId     String
  venue       Venue    @relation(fields: [venueId], references: [id])
  organizerId String
  organizer   User     @relation("OrganizerEvents", fields: [organizerId], references: [id])
  
  signups     EventSignup[]
}

model EventSignup {
  id           String   @id @default(cuid())
  queuePosition Int
  instruments  String[]
  needsMembers String[]
  signupTime   DateTime @default(now())
  
  eventId      String
  event        Event    @relation(fields: [eventId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId])
}

model VenueOrganizer {
  id       String @id @default(cuid())
  venueId  String
  venue    Venue  @relation(fields: [venueId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  approved Boolean @default(false)
  
  @@unique([venueId, userId])
}
